"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./traffic.plugins");
var TrafficOptions = require("./traffic.options");
var TrafficSsh = require("./traffic.ssh");
exports.setupCertsFromOriginSync = function () {
    TrafficSsh.setupSshFromEnvSync(); //setting up SSH in case SSH is specified;
    plugins.beautylog.log("now getting certificates from certificate origin");
    plugins.shelljs.exec("cd /LE_CERTS "
        + "&& git init && git remote add origin " + process.env.CERT_ORIGIN
        + "&& git pull origin master");
};
exports.setupCertsFromLeSync = function () {
    plugins.beautylog.log("now getting certs from Lets Encrypt");
    plugins.shelljs.exec("cd /app-ssl/ && ./letsencrypt.sh -c -d lossless.de -t dns-01 -k './hooks/cloudflare/hook.py'");
};
exports.pullCertsFromOrigin = function () {
};
exports.pushCertsToOriginSync = function () {
    plugins.beautylog.log("now syncing certs back to source ");
    //plugins.shelljs.exec("");
};
exports.getLeCerts = function () {
};
exports.getMissingCertsFromLe = function () {
};
exports.setupCerts = function () {
    var done = plugins.q.defer();
    if (TrafficOptions.certOrigin || TrafficOptions.certLe) {
        plugins.fs.ensureDirSync("/LE_CERTS");
        if (TrafficOptions.certOrigin)
            exports.setupCertsFromOriginSync();
        if (TrafficOptions.certLe)
            exports.setupCertsFromLeSync();
        if (TrafficOptions.certOrigin)
            exports.pushCertsToOriginSync();
    }
    done.resolve();
    return done.promise;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYWZmaWMuY2VydHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDRDQUE0QztBQUM1QyxJQUFPLE9BQU8sV0FBVyxtQkFBbUIsQ0FBQyxDQUFDO0FBQzlDLElBQU8sY0FBYyxXQUFXLG1CQUFtQixDQUFDLENBQUM7QUFDckQsSUFBTyxVQUFVLFdBQVcsZUFBZSxDQUFDLENBQUM7QUFFbEMsZ0NBQXdCLEdBQUc7SUFDbEMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQywwQ0FBMEM7SUFDNUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0RBQWtELENBQUMsQ0FBQztJQUMxRSxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FDaEIsZUFBZTtVQUNiLHVDQUF1QyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztVQUNqRSwyQkFBMkIsQ0FDaEMsQ0FBQztBQUNOLENBQUMsQ0FBQztBQUVTLDRCQUFvQixHQUFHO0lBQzlCLE9BQU8sQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHFDQUFxQyxDQUFDLENBQUM7SUFDN0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsOEZBQThGLENBQUMsQ0FBQztBQUN6SCxDQUFDLENBQUM7QUFFUywyQkFBbUIsR0FBRztBQUVqQyxDQUFDLENBQUM7QUFFUyw2QkFBcUIsR0FBRztJQUMvQixPQUFPLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO0lBQzNELDJCQUEyQjtBQUMvQixDQUFDLENBQUM7QUFFUyxrQkFBVSxHQUFHO0FBRXhCLENBQUMsQ0FBQztBQUVTLDZCQUFxQixHQUFHO0FBRW5DLENBQUMsQ0FBQztBQUVTLGtCQUFVLEdBQUc7SUFDcEIsSUFBSSxJQUFJLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM3QixFQUFFLENBQUEsQ0FBQyxjQUFjLENBQUMsVUFBVSxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDO1FBQ25ELE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ3RDLEVBQUUsQ0FBQSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7WUFBQyxnQ0FBd0IsRUFBRSxDQUFDO1FBQ3pELEVBQUUsQ0FBQSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7WUFBQyw0QkFBb0IsRUFBRSxDQUFDO1FBQ2pELEVBQUUsQ0FBQSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7WUFBQyw2QkFBcUIsRUFBRSxDQUFDO0lBQzFELENBQUM7SUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN4QixDQUFDLENBQUMiLCJmaWxlIjoidHJhZmZpYy5jZXJ0cy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cbmltcG9ydCBwbHVnaW5zID0gcmVxdWlyZShcIi4vdHJhZmZpYy5wbHVnaW5zXCIpO1xuaW1wb3J0IFRyYWZmaWNPcHRpb25zID0gcmVxdWlyZShcIi4vdHJhZmZpYy5vcHRpb25zXCIpO1xuaW1wb3J0IFRyYWZmaWNTc2ggPSByZXF1aXJlKFwiLi90cmFmZmljLnNzaFwiKTtcblxuZXhwb3J0IGxldCBzZXR1cENlcnRzRnJvbU9yaWdpblN5bmMgPSBmdW5jdGlvbigpe1xuICAgIFRyYWZmaWNTc2guc2V0dXBTc2hGcm9tRW52U3luYygpOyAvL3NldHRpbmcgdXAgU1NIIGluIGNhc2UgU1NIIGlzIHNwZWNpZmllZDtcbiAgICBwbHVnaW5zLmJlYXV0eWxvZy5sb2coXCJub3cgZ2V0dGluZyBjZXJ0aWZpY2F0ZXMgZnJvbSBjZXJ0aWZpY2F0ZSBvcmlnaW5cIik7XG4gICAgcGx1Z2lucy5zaGVsbGpzLmV4ZWMoXG4gICAgICAgIFwiY2QgL0xFX0NFUlRTIFwiXG4gICAgICAgICsgXCImJiBnaXQgaW5pdCAmJiBnaXQgcmVtb3RlIGFkZCBvcmlnaW4gXCIgKyBwcm9jZXNzLmVudi5DRVJUX09SSUdJTlxuICAgICAgICArIFwiJiYgZ2l0IHB1bGwgb3JpZ2luIG1hc3RlclwiXG4gICAgKTtcbn07XG5cbmV4cG9ydCBsZXQgc2V0dXBDZXJ0c0Zyb21MZVN5bmMgPSBmdW5jdGlvbigpe1xuICAgIHBsdWdpbnMuYmVhdXR5bG9nLmxvZyhcIm5vdyBnZXR0aW5nIGNlcnRzIGZyb20gTGV0cyBFbmNyeXB0XCIpO1xuICAgIHBsdWdpbnMuc2hlbGxqcy5leGVjKFwiY2QgL2FwcC1zc2wvICYmIC4vbGV0c2VuY3J5cHQuc2ggLWMgLWQgbG9zc2xlc3MuZGUgLXQgZG5zLTAxIC1rICcuL2hvb2tzL2Nsb3VkZmxhcmUvaG9vay5weSdcIik7XG59O1xuXG5leHBvcnQgbGV0IHB1bGxDZXJ0c0Zyb21PcmlnaW4gPSBmdW5jdGlvbigpe1xuXG59O1xuXG5leHBvcnQgbGV0IHB1c2hDZXJ0c1RvT3JpZ2luU3luYyA9IGZ1bmN0aW9uKCl7XG4gICAgcGx1Z2lucy5iZWF1dHlsb2cubG9nKFwibm93IHN5bmNpbmcgY2VydHMgYmFjayB0byBzb3VyY2UgXCIpO1xuICAgIC8vcGx1Z2lucy5zaGVsbGpzLmV4ZWMoXCJcIik7XG59O1xuXG5leHBvcnQgbGV0IGdldExlQ2VydHMgPSBmdW5jdGlvbigpe1xuXG59O1xuXG5leHBvcnQgbGV0IGdldE1pc3NpbmdDZXJ0c0Zyb21MZSA9IGZ1bmN0aW9uKCl7XG5cbn07XG5cbmV4cG9ydCBsZXQgc2V0dXBDZXJ0cyA9IGZ1bmN0aW9uKCl7XG4gICAgbGV0IGRvbmUgPSBwbHVnaW5zLnEuZGVmZXIoKTtcbiAgICBpZihUcmFmZmljT3B0aW9ucy5jZXJ0T3JpZ2luIHx8IFRyYWZmaWNPcHRpb25zLmNlcnRMZSl7XG4gICAgICAgIHBsdWdpbnMuZnMuZW5zdXJlRGlyU3luYyhcIi9MRV9DRVJUU1wiKTtcbiAgICAgICAgaWYoVHJhZmZpY09wdGlvbnMuY2VydE9yaWdpbikgc2V0dXBDZXJ0c0Zyb21PcmlnaW5TeW5jKCk7XG4gICAgICAgIGlmKFRyYWZmaWNPcHRpb25zLmNlcnRMZSkgc2V0dXBDZXJ0c0Zyb21MZVN5bmMoKTtcbiAgICAgICAgaWYoVHJhZmZpY09wdGlvbnMuY2VydE9yaWdpbikgcHVzaENlcnRzVG9PcmlnaW5TeW5jKCk7XG4gICAgfVxuICAgIGRvbmUucmVzb2x2ZSgpO1xuICAgIHJldHVybiBkb25lLnByb21pc2U7XG59OyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
