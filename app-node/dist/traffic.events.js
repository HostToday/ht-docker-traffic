"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./traffic.plugins");
var TrafficEnvironment = require("./traffic.environment");
var TrafficDockersock = require("./traffic.dockersock");
var tickerObs = plugins.rx.Observable
    .interval(5000).repeat();
exports.noTicker = false;
exports.startTicker = function () {
    var done = plugins.q.defer();
    exports.tickerSub = tickerObs.subscribe(function (x) {
        console.log('TickerCycle#: ' + x);
        TrafficDockersock.getContainerData("overview")
            .then(function (containerDataArg) {
            TrafficEnvironment.detectContainerChange(containerDataArg);
        });
    }, function (err) {
        console.log('Error: ' + err);
    }, function () {
        console.log('Completed');
    });
    console.log("subscribed ticker");
    if (exports.noTicker)
        exports.tickerSub.dispose();
    return done.promise;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYWZmaWMuZXZlbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSw0Q0FBNEM7QUFDNUMsSUFBTyxPQUFPLFdBQVcsbUJBQW1CLENBQUMsQ0FBQztBQUM5QyxJQUFPLGtCQUFrQixXQUFXLHVCQUF1QixDQUFDLENBQUM7QUFDN0QsSUFBTyxpQkFBaUIsV0FBVyxzQkFBc0IsQ0FBQyxDQUFDO0FBRTNELElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVTtLQUNoQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7QUFHbEIsZ0JBQVEsR0FBRyxLQUFLLENBQUM7QUFDakIsbUJBQVcsR0FBRztJQUNyQixJQUFJLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzdCLGlCQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FDM0IsVUFBVSxDQUFDO1FBQ1AsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7YUFDekMsSUFBSSxDQUFDLFVBQVMsZ0JBQWdCO1lBQzNCLGtCQUFrQixDQUFDLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDLEVBQ0QsVUFBVSxHQUFHO1FBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQyxFQUNEO1FBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM3QixDQUFDLENBQ0osQ0FBQztJQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNqQyxFQUFFLENBQUMsQ0FBQyxnQkFBUSxDQUFDO1FBQUMsaUJBQVMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztBQUN4QixDQUFDLENBQUMiLCJmaWxlIjoidHJhZmZpYy5ldmVudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5pbXBvcnQgcGx1Z2lucyA9IHJlcXVpcmUoXCIuL3RyYWZmaWMucGx1Z2luc1wiKTtcbmltcG9ydCBUcmFmZmljRW52aXJvbm1lbnQgPSByZXF1aXJlKFwiLi90cmFmZmljLmVudmlyb25tZW50XCIpO1xuaW1wb3J0IFRyYWZmaWNEb2NrZXJzb2NrID0gcmVxdWlyZShcIi4vdHJhZmZpYy5kb2NrZXJzb2NrXCIpO1xuXG5sZXQgdGlja2VyT2JzID0gcGx1Z2lucy5yeC5PYnNlcnZhYmxlXG4gICAgLmludGVydmFsKDUwMDApLnJlcGVhdCgpO1xuXG5leHBvcnQgbGV0IHRpY2tlclN1YjtcbmV4cG9ydCBsZXQgbm9UaWNrZXIgPSBmYWxzZTtcbmV4cG9ydCBsZXQgc3RhcnRUaWNrZXIgPSBmdW5jdGlvbigpe1xuICAgIGxldCBkb25lID0gcGx1Z2lucy5xLmRlZmVyKCk7XG4gICAgdGlja2VyU3ViID0gdGlja2VyT2JzLnN1YnNjcmliZShcbiAgICAgICAgZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaWNrZXJDeWNsZSM6ICcgKyB4KTtcbiAgICAgICAgICAgIFRyYWZmaWNEb2NrZXJzb2NrLmdldENvbnRhaW5lckRhdGEoXCJvdmVydmlld1wiKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKGNvbnRhaW5lckRhdGFBcmcpe1xuICAgICAgICAgICAgICAgICAgICBUcmFmZmljRW52aXJvbm1lbnQuZGV0ZWN0Q29udGFpbmVyQ2hhbmdlKGNvbnRhaW5lckRhdGFBcmcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3I6ICcgKyBlcnIpO1xuICAgICAgICB9LFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnQ29tcGxldGVkJyk7XG4gICAgICAgIH1cbiAgICApO1xuICAgIGNvbnNvbGUubG9nKFwic3Vic2NyaWJlZCB0aWNrZXJcIik7XG4gICAgaWYgKG5vVGlja2VyKSB0aWNrZXJTdWIuZGlzcG9zZSgpO1xuICAgIHJldHVybiBkb25lLnByb21pc2U7XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
