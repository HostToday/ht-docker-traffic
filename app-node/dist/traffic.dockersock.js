"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./traffic.plugins");
exports.getContainerData = function (typeArg) {
    var done = plugins.q.defer();
    plugins.request.get("http://unix:/var/run/docker.sock:/containers/json")
        .on("data", function (data) {
        var dataString = data.toString("utf8");
        var dataObject = JSON.parse(dataString);
        var detailedDataObject = [];
        var recursiveCounter = 0;
        //switch types
        switch (typeArg) {
            case "detailed":
                var makeDetailed_1 = function () {
                    if (typeof dataObject[recursiveCounter] != "undefined") {
                        plugins.request.get("http://unix:/var/run/docker.sock:/containers/"
                            + dataObject[recursiveCounter].Id
                            + "/json")
                            .on("data", function (data) {
                            recursiveCounter++;
                            var dataString = data.toString("utf8");
                            var dataObject = JSON.parse(dataString);
                            detailedDataObject.push(dataObject);
                            makeDetailed_1();
                        });
                    }
                    else {
                        done.resolve(detailedDataObject);
                    }
                };
                makeDetailed_1();
                break;
            case "overview":
                done.resolve(dataObject);
            default:
                break;
        }
        ;
    });
    return done.promise;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRyYWZmaWMuZG9ja2Vyc29jay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNENBQTRDO0FBQzVDLElBQU8sT0FBTyxXQUFXLG1CQUFtQixDQUFDLENBQUM7QUFHbkMsd0JBQWdCLEdBQUcsVUFBUyxPQUFjO0lBQ2pELElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbURBQW1ELENBQUM7U0FDbkUsRUFBRSxDQUFDLE1BQU0sRUFBQyxVQUFTLElBQUk7UUFDcEIsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksa0JBQWtCLEdBQUcsRUFBRSxDQUFDO1FBQzVCLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBRXpCLGNBQWM7UUFDZCxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO1lBQ2IsS0FBSyxVQUFVO2dCQUNYLElBQUksY0FBWSxHQUFHO29CQUNmLEVBQUUsQ0FBQSxDQUFDLE9BQU8sVUFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksV0FBVyxDQUFDLENBQUEsQ0FBQzt3QkFDbkQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0NBQStDOzhCQUN6RCxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFOzhCQUNoQyxPQUFPLENBQUM7NkJBQ1osRUFBRSxDQUFDLE1BQU0sRUFBQyxVQUFTLElBQUk7NEJBQ3BCLGdCQUFnQixFQUFFLENBQUM7NEJBQ25CLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7NEJBQ3ZDLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7NEJBQ3hDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzs0QkFDcEMsY0FBWSxFQUFFLENBQUM7d0JBQ25CLENBQUMsQ0FBQyxDQUFDO29CQUNYLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ0osSUFBSSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO29CQUNyQyxDQUFDO2dCQUNMLENBQUMsQ0FBQztnQkFDRixjQUFZLEVBQUUsQ0FBQztnQkFDZixLQUFLLENBQUM7WUFDVixLQUFLLFVBQVU7Z0JBQ1gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUM3QjtnQkFDSSxLQUFLLENBQUM7UUFDZCxDQUFDO1FBQUEsQ0FBQztJQUVOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFDeEIsQ0FBQyxDQUFDIiwiZmlsZSI6InRyYWZmaWMuZG9ja2Vyc29jay5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cbmltcG9ydCBwbHVnaW5zID0gcmVxdWlyZShcIi4vdHJhZmZpYy5wbHVnaW5zXCIpO1xuaW1wb3J0IFRyYWZmaWNFbnZpcm9ubWVudCA9IHJlcXVpcmUoXCIuL3RyYWZmaWMuZW52aXJvbm1lbnRcIik7XG5cbmV4cG9ydCBsZXQgZ2V0Q29udGFpbmVyRGF0YSA9IGZ1bmN0aW9uKHR5cGVBcmc6c3RyaW5nKXtcbiAgICB2YXIgZG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xuICAgIHBsdWdpbnMucmVxdWVzdC5nZXQoXCJodHRwOi8vdW5peDovdmFyL3J1bi9kb2NrZXIuc29jazovY29udGFpbmVycy9qc29uXCIpXG4gICAgICAgIC5vbihcImRhdGFcIixmdW5jdGlvbihkYXRhKXtcbiAgICAgICAgICAgIGxldCBkYXRhU3RyaW5nID0gZGF0YS50b1N0cmluZyhcInV0ZjhcIik7XG4gICAgICAgICAgICBsZXQgZGF0YU9iamVjdCA9IEpTT04ucGFyc2UoZGF0YVN0cmluZyk7XG4gICAgICAgICAgICBsZXQgZGV0YWlsZWREYXRhT2JqZWN0ID0gW107XG4gICAgICAgICAgICBsZXQgcmVjdXJzaXZlQ291bnRlciA9IDA7XG5cbiAgICAgICAgICAgIC8vc3dpdGNoIHR5cGVzXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGVBcmcpe1xuICAgICAgICAgICAgICAgIGNhc2UgXCJkZXRhaWxlZFwiOlxuICAgICAgICAgICAgICAgICAgICBsZXQgbWFrZURldGFpbGVkID0gZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBkYXRhT2JqZWN0W3JlY3Vyc2l2ZUNvdW50ZXJdICE9IFwidW5kZWZpbmVkXCIpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbnMucmVxdWVzdC5nZXQoXCJodHRwOi8vdW5peDovdmFyL3J1bi9kb2NrZXIuc29jazovY29udGFpbmVycy9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBkYXRhT2JqZWN0W3JlY3Vyc2l2ZUNvdW50ZXJdLklkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArXCIvanNvblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oXCJkYXRhXCIsZnVuY3Rpb24oZGF0YSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmVDb3VudGVyKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YVN0cmluZyA9IGRhdGEudG9TdHJpbmcoXCJ1dGY4XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGFPYmplY3QgPSBKU09OLnBhcnNlKGRhdGFTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV0YWlsZWREYXRhT2JqZWN0LnB1c2goZGF0YU9iamVjdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlRGV0YWlsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUucmVzb2x2ZShkZXRhaWxlZERhdGFPYmplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBtYWtlRGV0YWlsZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm92ZXJ2aWV3XCI6XG4gICAgICAgICAgICAgICAgICAgIGRvbmUucmVzb2x2ZShkYXRhT2JqZWN0KTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSk7XG4gICAgcmV0dXJuIGRvbmUucHJvbWlzZTtcbn07Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
