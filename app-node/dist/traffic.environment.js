"use strict";
/// <reference path="./typings/main.d.ts" />
var plugins = require("./traffic.plugins");
exports.checkDebug = function () {
    var done = plugins.q.defer();
    if (process.env.DEBUG === "true") {
        plugins.beautylog.log("Showing Debug Messages, because ENV: DEBUG === 'true'");
        done.resolve(true);
    }
    else {
        done.resolve(false);
    }
    ;
    return done.promise;
};
exports.checkCertOriginSync = function () {
    var sslUpdate;
    if (process.env.CERT_ORIGIN) {
        plugins.beautylog.log("Allright, CERT_UPDATE is set");
        sslUpdate = true;
    }
    else {
        plugins.beautylog.warn("CERT_UPDATE is not set! You are not in a Cluster?");
        sslUpdate = false;
    }
    ;
    return sslUpdate;
};
exports.checkCertLeSync = function () {
    var sslLe;
    if (process.env.CERT_LE) {
        plugins.beautylog.log("Allright, CERT_LE is set");
        sslLe = true;
    }
    else {
        plugins.beautylog.warn("CERT_LE is not set! You are not in a Cluster?");
        sslLe = false;
    }
    ;
    return sslLe;
};
exports.checkCfUpdateSync = function () {
    var cfSync;
    if (process.env.CF_UPDATE === "true") {
        plugins.beautylog.log("Allright, CF_UPDATE is true. Now checking for credentials.");
        if (process.env.CF_EMAIL && process.env.CF_KEY) {
            plugins.beautylog.log("Found Cloudflare Credentials");
            cfSync = true;
        }
        else {
            plugins.beautylog.error("Bummer! Cloudflare Credentials are missing!");
            cfSync = false;
        }
    }
    else {
        plugins.beautylog.warn("CF_UPDATE is false! You are not in a Cluster?");
        cfSync = false;
    }
    ;
    return cfSync;
};

//# sourceMappingURL=data:application/json;base64,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QUFNLENBQUM7QUFDbEIsQ0FBQyxDQUFDIiwiZmlsZSI6InRyYWZmaWMuZW52aXJvbm1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi90eXBpbmdzL21haW4uZC50c1wiIC8+XG5pbXBvcnQgcGx1Z2lucyA9IHJlcXVpcmUoXCIuL3RyYWZmaWMucGx1Z2luc1wiKTtcblxuZXhwb3J0IGxldCBjaGVja0RlYnVnID0gZnVuY3Rpb24oKXtcbiAgICBsZXQgZG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xuICAgIGlmKHByb2Nlc3MuZW52LkRFQlVHID09PSBcInRydWVcIil7XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmxvZyhcIlNob3dpbmcgRGVidWcgTWVzc2FnZXMsIGJlY2F1c2UgRU5WOiBERUJVRyA9PT0gJ3RydWUnXCIpO1xuICAgICAgICBkb25lLnJlc29sdmUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG9uZS5yZXNvbHZlKGZhbHNlKTtcbiAgICB9O1xuICAgIHJldHVybiBkb25lLnByb21pc2U7XG59O1xuXG5leHBvcnQgbGV0IGNoZWNrQ2VydE9yaWdpblN5bmMgPSBmdW5jdGlvbigpe1xuICAgIGxldCBzc2xVcGRhdGU6Ym9vbGVhbjtcbiAgICBpZihwcm9jZXNzLmVudi5DRVJUX09SSUdJTil7XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmxvZyhcIkFsbHJpZ2h0LCBDRVJUX1VQREFURSBpcyBzZXRcIik7XG4gICAgICAgIHNzbFVwZGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cud2FybihcIkNFUlRfVVBEQVRFIGlzIG5vdCBzZXQhIFlvdSBhcmUgbm90IGluIGEgQ2x1c3Rlcj9cIik7XG4gICAgICAgIHNzbFVwZGF0ZSA9IGZhbHNlO1xuICAgIH07XG4gICAgcmV0dXJuIHNzbFVwZGF0ZTtcbn07XG5cbmV4cG9ydCBsZXQgY2hlY2tDZXJ0TGVTeW5jID0gZnVuY3Rpb24oKXtcbiAgICBsZXQgc3NsTGU6Ym9vbGVhbjtcbiAgICBpZihwcm9jZXNzLmVudi5DRVJUX0xFKXtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cubG9nKFwiQWxscmlnaHQsIENFUlRfTEUgaXMgc2V0XCIpO1xuICAgICAgICBzc2xMZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cud2FybihcIkNFUlRfTEUgaXMgbm90IHNldCEgWW91IGFyZSBub3QgaW4gYSBDbHVzdGVyP1wiKTtcbiAgICAgICAgc3NsTGUgPSBmYWxzZTtcbiAgICB9O1xuICAgIHJldHVybiBzc2xMZTtcbn07XG5cblxuXG5leHBvcnQgbGV0IGNoZWNrQ2ZVcGRhdGVTeW5jID0gZnVuY3Rpb24oKXtcbiAgICBsZXQgY2ZTeW5jOmJvb2xlYW47XG4gICAgaWYocHJvY2Vzcy5lbnYuQ0ZfVVBEQVRFID09PSBcInRydWVcIil7XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmxvZyhcIkFsbHJpZ2h0LCBDRl9VUERBVEUgaXMgdHJ1ZS4gTm93IGNoZWNraW5nIGZvciBjcmVkZW50aWFscy5cIik7XG4gICAgICAgIGlmKHByb2Nlc3MuZW52LkNGX0VNQUlMICYmIHByb2Nlc3MuZW52LkNGX0tFWSl7XG4gICAgICAgICAgICBwbHVnaW5zLmJlYXV0eWxvZy5sb2coXCJGb3VuZCBDbG91ZGZsYXJlIENyZWRlbnRpYWxzXCIpO1xuICAgICAgICAgICAgY2ZTeW5jID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmVycm9yKFwiQnVtbWVyISBDbG91ZGZsYXJlIENyZWRlbnRpYWxzIGFyZSBtaXNzaW5nIVwiKTtcbiAgICAgICAgICAgIGNmU3luYyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cud2FybihcIkNGX1VQREFURSBpcyBmYWxzZSEgWW91IGFyZSBub3QgaW4gYSBDbHVzdGVyP1wiKTtcbiAgICAgICAgY2ZTeW5jID0gZmFsc2U7XG4gICAgfTtcbiAgICByZXR1cm4gY2ZTeW5jO1xufTtcblxuXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
